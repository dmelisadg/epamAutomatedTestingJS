{
  "stats": {
    "suites": 1,
    "tests": 12,
    "passes": 12,
    "pending": 0,
    "failures": 0,
    "start": "2023-10-18T00:01:39.242Z",
    "end": "2023-10-18T00:01:39.283Z",
    "duration": 41,
    "testsRegistered": 12,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "e2342873-884a-4e25-9edb-ec5a3ac81cb7",
      "title": "",
      "fullFile": "C:\\Users\\dmeli\\Desktop\\EPAM_IntroAutomatedTestingJS\\introAutomatedTestingJS\\test\\numbers-validator\\isNumberEven.spec.js",
      "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "d928d94f-74bf-42be-ab85-29ff7d886d5f",
          "title": "isNumberEven positive test",
          "fullFile": "C:\\Users\\dmeli\\Desktop\\EPAM_IntroAutomatedTestingJS\\introAutomatedTestingJS\\test\\numbers-validator\\isNumberEven.spec.js",
          "file": "\\test\\numbers-validator\\isNumberEven.spec.js",
          "beforeHooks": [
            {
              "title": "\"before each\" hook in \"isNumberEven positive test\"",
              "fullTitle": "isNumberEven positive test \"before each\" hook in \"isNumberEven positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = new NumbersValidator();",
              "err": {},
              "uuid": "0c0dee6b-dd81-4acd-8fbc-0eec9139fa5e",
              "parentUUID": "d928d94f-74bf-42be-ab85-29ff7d886d5f",
              "isHook": true,
              "skipped": false
            }
          ],
          "afterHooks": [
            {
              "title": "\"after each\" hook in \"isNumberEven positive test\"",
              "fullTitle": "isNumberEven positive test \"after each\" hook in \"isNumberEven positive test\"",
              "timedOut": false,
              "duration": 0,
              "state": null,
              "speed": null,
              "pass": false,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "validator = null;",
              "err": {},
              "uuid": "76a96fe3-c7ec-4021-ac1b-b0d705e0e0b9",
              "parentUUID": "d928d94f-74bf-42be-ab85-29ff7d886d5f",
              "isHook": true,
              "skipped": false
            }
          ],
          "tests": [
            {
              "title": "should return true when provided with an even number",
              "fullTitle": "isNumberEven positive test should return true when provided with an even number",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResult = validator.isNumberEven(4);\nexpect(validationResult).to.be.equal(true);",
              "err": {},
              "uuid": "39121c3e-9992-48ef-9f92-074e782ecfaa",
              "parentUUID": "d928d94f-74bf-42be-ab85-29ff7d886d5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return false when provided with an even number",
              "fullTitle": "isNumberEven positive test should return false when provided with an even number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResult = validator.isNumberEven(5);\nexpect(validationResult).to.be.equal(false);",
              "err": {},
              "uuid": "64763e9d-626c-4b7b-91b8-ec676f62efd6",
              "parentUUID": "d928d94f-74bf-42be-ab85-29ff7d886d5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Should throw an error when provided with an even number",
              "fullTitle": "isNumberEven positive test Should throw an error when provided with an even number",
              "timedOut": false,
              "duration": 2,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isNumberEven('4');\n}).to.throw('[4] is not of type \"Number\" it is of type \"string\"');",
              "err": {},
              "uuid": "597f7674-42ae-4798-ad87-70bfe9dbdda7",
              "parentUUID": "d928d94f-74bf-42be-ab85-29ff7d886d5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an array of even numbers",
              "fullTitle": "isNumberEven positive test should return an array of even numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResult = validator.getEvenNumbersFromArray([2, 3, 4, 6]);\nexpect(validationResult).to.deep.equal([2, 4, 6]);",
              "err": {},
              "uuid": "ee106400-72bd-4617-92fb-382701e4ed3f",
              "parentUUID": "d928d94f-74bf-42be-ab85-29ff7d886d5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "No even numbers inside array",
              "fullTitle": "isNumberEven positive test No even numbers inside array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResult = validator.getEvenNumbersFromArray([3, 5]);\nexpect(validationResult).to.deep.equal([]);",
              "err": {},
              "uuid": "325c9e83-9fe4-462d-bd07-4b924ec8f6f3",
              "parentUUID": "d928d94f-74bf-42be-ab85-29ff7d886d5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return an array of even numbers",
              "fullTitle": "isNumberEven positive test should return an array of even numbers",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.getEvenNumbersFromArray(['3', 5]);\n}).to.throw('[3,5] is not an array of \"Numbers\"');",
              "err": {},
              "uuid": "22e46b8d-23d8-423c-86ea-b6448480a884",
              "parentUUID": "d928d94f-74bf-42be-ab85-29ff7d886d5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "All elements should be numbers",
              "fullTitle": "isNumberEven positive test All elements should be numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResult = validator.isAllNumbers([2, 3, 4, 6]);\nexpect(validationResult).to.be.equal(true);",
              "err": {},
              "uuid": "0a3bb69b-1035-4f5c-89d2-21639b6f3089",
              "parentUUID": "d928d94f-74bf-42be-ab85-29ff7d886d5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "All elements should be numbers",
              "fullTitle": "isNumberEven positive test All elements should be numbers",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResult = validator.isAllNumbers(['2', 3, 4, 6]);\nexpect(validationResult).to.be.equal(false);",
              "err": {},
              "uuid": "1a49e409-c676-425e-b15a-a0db18f4a5e8",
              "parentUUID": "d928d94f-74bf-42be-ab85-29ff7d886d5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Not an array",
              "fullTitle": "isNumberEven positive test Not an array",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isAllNumbers('3');\n}).to.throw('[3] is not an array');",
              "err": {},
              "uuid": "35792f65-5bdc-40f8-bca7-6335df281821",
              "parentUUID": "d928d94f-74bf-42be-ab85-29ff7d886d5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Element should be an integer",
              "fullTitle": "isNumberEven positive test Element should be an integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResult = validator.isInteger(2);\nexpect(validationResult).to.be.equal(true);",
              "err": {},
              "uuid": "6c84ad8c-cac4-4fbd-af2d-753f0f388f2b",
              "parentUUID": "d928d94f-74bf-42be-ab85-29ff7d886d5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Element should be an integer",
              "fullTitle": "isNumberEven positive test Element should be an integer",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const validationResult = validator.isInteger(2.5);\nexpect(validationResult).to.be.equal(false);",
              "err": {},
              "uuid": "01551c27-6aae-46b6-a23b-6f107eb47d35",
              "parentUUID": "d928d94f-74bf-42be-ab85-29ff7d886d5f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "Not a number",
              "fullTitle": "isNumberEven positive test Not a number",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "expect(() => {\n  validator.isInteger('3');\n}).to.throw('[3] is not a number');",
              "err": {},
              "uuid": "d5b9a8e7-e0f8-4ae3-a056-0c6bb4317c5b",
              "parentUUID": "d928d94f-74bf-42be-ab85-29ff7d886d5f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "39121c3e-9992-48ef-9f92-074e782ecfaa",
            "64763e9d-626c-4b7b-91b8-ec676f62efd6",
            "597f7674-42ae-4798-ad87-70bfe9dbdda7",
            "ee106400-72bd-4617-92fb-382701e4ed3f",
            "325c9e83-9fe4-462d-bd07-4b924ec8f6f3",
            "22e46b8d-23d8-423c-86ea-b6448480a884",
            "0a3bb69b-1035-4f5c-89d2-21639b6f3089",
            "1a49e409-c676-425e-b15a-a0db18f4a5e8",
            "35792f65-5bdc-40f8-bca7-6335df281821",
            "6c84ad8c-cac4-4fbd-af2d-753f0f388f2b",
            "01551c27-6aae-46b6-a23b-6f107eb47d35",
            "d5b9a8e7-e0f8-4ae3-a056-0c6bb4317c5b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 5,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "10.2.0"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}